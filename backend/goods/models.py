from datetime import datetime

from django.conf import settings
from django.core.mail import send_mail
from django.core.validators import validate_email
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver

from users.models import User


class Image(models.Model):
    images = models.ImageField(
        upload_to='backend_media/',
        verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    )
    goods = models.ForeignKey(
        "Goods",
        related_name='images',
        on_delete=models.CASCADE,
        verbose_name='–ë–ª—é–¥–æ'
    )

    def __str__(self):
        return f'–ö–∞—Ä—Ç–∏–Ω–∫–∞ #{self.pk} –¥–ª—è –±–ª—é–¥–∞ {self.goods.title}'


class DishType(models.Model):
    name = models.CharField(
        max_length=100,
        verbose_name='–¢–∏–ø –±–ª—é–¥–∞'
    )

    class Meta:
        verbose_name = '–¢–∏–ø –±–ª—é–¥–∞'
        verbose_name_plural = '–¢–∏–ø—ã –±–ª—é–¥'
        ordering = ['name']

    def __str__(self):
        return self.name


class Promotion(models.Model):
    name = models.CharField(
        max_length=100,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏'
    )

    class Meta:
        verbose_name = '–ê–∫—Ü–∏—è'
        verbose_name_plural = '–ê–∫—Ü–∏–∏'
        ordering = ['name']

    def __str__(self):
        return self.name


class Goods(models.Model):
    title = models.CharField(
        max_length=355,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞'
    )
    description = models.CharField(
        max_length=355,
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞'
    )
    compound = models.CharField(
        max_length=500,
        verbose_name='–°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞'
    )
    weight = models.IntegerField('–í–µ—Å –±–ª—é–¥–∞')
    calories = models.IntegerField('–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')
    price = models.IntegerField('–¶–µ–Ω–∞ –±–ª—é–¥–∞')
    image = models.ManyToManyField(
        Image,
        blank=True,
        related_name='goods_img'
    )
    count = models.IntegerField(
        default=1,
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞'
    )
    type = models.ForeignKey(
        DishType,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–¢–∏–ø –±–ª—é–¥–∞'
    )
    promotion = models.ForeignKey(
        Promotion,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–ê–∫—Ü–∏—è –±–ª—é–¥–∞'
    )

    class Meta:
        verbose_name = '–ë–ª—é–¥–æ'
        verbose_name_plural = '–ë–ª—é–¥–∞'
        ordering = ['-pk']

    def __str__(self):
        return f'–ë–ª—é–¥–æ {self.title}'


class Favorite(models.Model):
    user = models.ForeignKey(
        User,
        related_name='favorites',
        on_delete=models.CASCADE
    )
    goods = models.ForeignKey(
        Goods,
        related_name='users_favorites',
        on_delete=models.CASCADE
    )

    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ'
        constraints = [
            models.UniqueConstraint(
                fields=['goods', 'user'],
                name='favorite_unique'
            )
        ]

    def __str__(self):
        return f'{self.user} added {self.goods} to favorite'


class ShoppingCart(models.Model):
    user = models.ForeignKey(
        User,
        verbose_name='–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
        related_name='shopping_cart',
        on_delete=models.CASCADE
    )
    goods = models.ForeignKey(
        Goods,
        verbose_name='–ü–æ–∫—É–ø–∫–∞',
        related_name='shopping_cart_goods',
        on_delete=models.CASCADE
    )
    count = models.IntegerField(
        default=1,
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥'
    )
    price = models.IntegerField('–¶–µ–Ω–∞ –±–ª—é–¥–∞')

    class Meta:
        verbose_name = '–ü–æ–∫—É–ø–∫–∞'
        verbose_name_plural = '–ü–æ–∫—É–ø–∫–∏'
        constraints = [
            models.UniqueConstraint(
                fields=['goods', 'user'],
                name='shopping_cart_unique'
            )
        ]

    def __str__(self):
        return f'{self.user} added {self.goods} to shopping cart'


class Order(models.Model):
    user = models.ForeignKey(
        User,
        verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
        related_name='orders',
        on_delete=models.CASCADE
    )
    goods = models.ManyToManyField(Goods, through='OrderItem')
    order_date = models.DateTimeField('–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', auto_now_add=True)
    total_price = models.IntegerField('–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞')
    cutlery = models.IntegerField('–°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã')
    delivery_cost = models.IntegerField('–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
    fio = models.CharField('–§.–ò.–û.', max_length=255)
    email = models.EmailField(
        db_index=True,
        max_length=255,
        verbose_name='–ü–æ—á—Ç–∞',
        validators=[validate_email],
    )
    address = models.CharField('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=255)
    delivery_time = models.CharField('–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=50)
    payment_method = models.CharField('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã', max_length=100)

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã'

    def __str__(self):
        return f'–ó–∞–∫–∞–∑ #{self.pk} –æ—Ç {self.order_date}'


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    goods = models.ForeignKey(Goods, on_delete=models.CASCADE)
    count = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ'

    def __str__(self):
        return f'{self.goods.title} - {self.count}'


class Reservation(models.Model):
    ROOM_TYPES = (
        ('hall', '–ó–∞–ª'),
        ('veranda', '–í–µ—Ä–∞–Ω–¥–∞'),
    )
    STATUS_CHOICES = (
        ('booked', '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'),
        ('available', '–°–≤–æ–±–æ–¥–µ–Ω'),
    )

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name='–ë—Ä–æ–Ω–∏—Ä—É—é—â–∏–π'
    )
    room_type = models.CharField(
        max_length=50,
        choices=ROOM_TYPES,
        verbose_name='–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è'
    )
    table_number = models.IntegerField(verbose_name='–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞')
    date_time = models.CharField(
        max_length=50,
        verbose_name='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    num_people = models.IntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫')
    name = models.CharField(max_length=255, verbose_name='–ò–º—è * –±—Ä–æ–Ω–∏—Ä—É—é—â–µ–≥–æ')
    phone = models.CharField(max_length=15, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    comment = models.TextField(
        verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        blank=True,
        null=True
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='available',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )

    class Meta:
        verbose_name = '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞'
        verbose_name_plural = '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤'
        ordering = ['-pk']

    def __str__(self):
        return (f"–†–µ–∑–µ—Ä–≤ —Å—Ç–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {self.user.email} "
                f"–¥–ª—è {self.num_people} —á–µ–ª–æ–≤–µ–∫ –Ω–∞ {self.date_time}")

    def format_datetime(self):
        original_format = "%a %b %d %Y %H:%M"
        new_format = "%d %B %Y %H:%M"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
        dt = datetime.strptime(self.date_time, original_format)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return dt.strftime(new_format)

    def send_confirmation_email(self):
        formatted_date = self.format_datetime()
        admin_message = (f"üìã –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê –û–¢ {self.name}\n\n"
                         f"üìû –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê: {self.phone}\n"
                         f"üìß –ü–û–ß–¢–ê: {self.user.email}\n"
                         f"üè∞ –¢–ò–ü –ü–û–ú–ï–©–ï–ù–ò–Ø: {self.room_type}\n"
                         f"üî¢ –ù–û–ú–ï–† –°–¢–û–õ–ê: {self.table_number}\n"
                         f"üë• –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–°–¢–ï–ô: {self.num_people}\n"
                         f"üìÖ –î–ê–¢–ê –ò –í–†–ï–ú–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø: {formatted_date}\n"
                         f"üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: {self.comment}")

        user_message = (f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.name}!\n\n"
                        f"‚úÖ –í–∞—à —Å—Ç–æ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
                        f"üìÖ –î–ê–¢–ê –ò –í–†–ï–ú–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø: {formatted_date}\n\n"
                        f"üè∞ –¢–ò–ü –ü–û–ú–ï–©–ï–ù–ò–Ø: {self.room_type}\n"
                        f"üî¢ –ù–û–ú–ï–† –°–¢–û–õ–ê: {self.table_number}\n"
                        f"üë• –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–°–¢–ï–ô: {self.num_people}\n"
                        f"üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: {self.comment}\n"
                        f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è!")

        send_mail(
            f"–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê –û–¢ {self.name}",
            admin_message,
            settings.DEFAULT_FROM_EMAIL,
            [settings.DEFAULT_FROM_EMAIL],
            fail_silently=False,
        )
        send_mail(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞",
            user_message,
            settings.DEFAULT_FROM_EMAIL,
            [self.user.email],
            fail_silently=False,
        )


@receiver(post_save, sender=Reservation)
def reservation_created(sender, instance, created, **kwargs):
    if created:
        instance.send_confirmation_email()
