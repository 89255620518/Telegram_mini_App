import base64

import requests
from django.conf import settings
from django.contrib.auth import authenticate
from django.core.mail import send_mail
from django.utils.decorators import method_decorator
from django.utils.translation import gettext_lazy as _
from django.views.decorators.csrf import csrf_exempt
from rest_framework import status
from rest_framework.authtoken.models import Token
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from goods.models import Goods
from .backends import PhoneBackend


@method_decorator(csrf_exempt, name='dispatch')
class TokenCreateByPhoneView(APIView):
    def post(self, request):
        phone = request.data.get('phone')
        password = request.data.get('password')

        if phone is None or password is None:
            return Response(
                {'message': _('–¢–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è—é—Ç—Å—è '
                                '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏')},
                status=status.HTTP_400_BAD_REQUEST
            )

        user = authenticate(
            request,
            phone=phone,
            password=password,
            backend=PhoneBackend()
        )

        if not user:
            return Response({'message': _('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')},
                            status=status.HTTP_401_UNAUTHORIZED)

        token, created = Token.objects.get_or_create(user=user)

        return Response({'auth_token': token.key})


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_order(request):
    try:
        user = request.user

        address = request.data.get('address', '')
        comments = request.data.get('comments', '')
        description = request.data.get('description', '')
        delivery_time = request.data.get('delivery_time', '')
        goods_ids = request.data.get('goods_id', [])
        count_goods = request.data.get('count_goods', [])
        price_goods = request.data.get('price_goods', [])
        final_price = request.data.get('final_price', '')

        if not all([
            request.data.get('address'),
            request.data.get('delivery_time'),
            request.data.get('goods_id'),
            request.data.get('count_goods'),
            request.data.get('price_goods'),
            request.data.get('final_price')
        ]):
            return Response(
                {'error': 'Missing required fields'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if len(set(map(len, [goods_ids, count_goods, price_goods]))) > 1:
            return Response(
                {'error': '–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö'},
                status=status.HTTP_400_BAD_REQUEST
            )

        first_name = user.first_name
        last_name = user.last_name
        phone = user.phone
        email_user = user.email

        message = (
            f"–ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£ –û–¢ {last_name} {first_name}\n\n"
            f"–ù–ê–ó–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê: {description}\n\n"
            f"–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê: {phone}\n–ü–û–ß–¢–ê: {email_user}\n\n–ó–ê–ö–ê–ó:\n"
            f"–ê–î–†–ï–° –î–û–°–¢–ê–í–ö–ò:{address}\n"
            f"–î–ê–¢–ê –î–û–°–¢–ê–í–ö–ò: {delivery_time}\n"
            f"–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò: {comments}\n\n"
        )

        for i, goods_id in enumerate(goods_ids):
            try:
                goods = Goods.objects.get(pk=goods_id)
                message += (
                    f"–¢–û–í–ê–† {i + 1}:\n"
                    f"–ù–ê–ó–í–ê–ù–ò–ï: {goods.title}\n"
                    f"–ö–û–õ–ò–ß–ï–°–¢–í–û: {count_goods[i]}\n"
                    f"–¶–ï–ù–ê: {price_goods[i]}\n\n"
                )
            except Goods.DoesNotExist:
                message += (
                    f"–¢–û–í–ê–† {i + 1}:\n"
                    f"–ù–ê–ó–í–ê–ù–ò–ï: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {goods_id})\n"
                    f"–ö–û–õ–ò–ß–ï–°–¢–í–û: {count_goods[i]}\n"
                    f"–¶–ï–ù–ê: {price_goods[i]}\n\n"
                )
        message += f"–û–ë–©–ê–Ø –°–£–ú–ú–ê: {final_price}"
        send_mail(
            f"–ó–ê–ö–ê–ó –ù–ê –î–û–°–¢–ê–í–ö–£ –û–¢ {last_name} {first_name}",
            message,
            settings.DEFAULT_FROM_EMAIL,
            [settings.DEFAULT_FROM_EMAIL],
            fail_silently=False,
        )
        return Response({'success': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
    except Exception:
        return Response(
            {'error': 'Internal server error'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_preorder(request):
    try:
        user = request.user

        comments = request.data.get('comments', '')
        description = request.data.get('description', '')
        goods_ids = request.data.get('goods_id', [])
        count_goods = request.data.get('count_goods', [])
        price_goods = request.data.get('price_goods', [])
        final_price = request.data.get('final_price', '')

        if not all([
            request.data.get('goods_id'),
            request.data.get('count_goods'),
            request.data.get('price_goods'),
            request.data.get('final_price')
        ]):
            return Response(
                {'error': 'Missing required fields'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if len(set(map(len, [goods_ids, count_goods, price_goods]))) > 1:
            return Response(
                {'error': '–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö'},
                status=status.HTTP_400_BAD_REQUEST
            )

        goods_list = Goods.objects.filter(pk__in=goods_ids)

        first_name = user.first_name
        last_name = user.last_name
        phone = user.phone
        email_user = user.email

        message = (
            f"–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –û–¢ {last_name} {first_name}\n\n"
            f"–ù–ê–ó–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê: {description}\n\n"
            f"–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê: {phone}\n–ü–û–ß–¢–ê: {email_user}\n\n"
            f"–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò: {comments}\n\n"
            f"–ó–ê–ö–ê–ó:\n"
        )

        for i, goods in enumerate(goods_list):
            message += (
                f"–¢–û–í–ê–† {i + 1}:\n"
                f"–ù–ê–ó–í–ê–ù–ò–ï: {goods.title}\n"
                f"–ö–û–õ–ò–ß–ï–°–¢–í–û: {count_goods[i]}\n"
                f"–¶–ï–ù–ê: {price_goods[i]}\n\n"
            )
        message += f"–û–ë–©–ê–Ø –°–£–ú–ú–ê: {final_price}"
        send_mail(
            f"–ü–†–ï–î–ó–ê–ö–ê–ó –û–¢ {last_name} {first_name}",
            message,
            settings.DEFAULT_FROM_EMAIL,
            [settings.DEFAULT_FROM_EMAIL],
            fail_silently=False,
        )
        return Response({'success': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
    except Exception:
        return Response(
            {'error': 'Internal server error'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_taxi(request):
    date = request.data.get('date', '')
    time = request.data.get('time', '')
    first_name = request.data.get('first_name', '')
    email_user = request.data.get('email_user', '')
    phone = request.data.get('phone', '')
    address = request.data.get('address', '')
    comment = request.data.get('comment', '')

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ–µ)
    message_admin = (
        f"üöñ –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –¢–ê–ö–°–ò üöñ\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {first_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìß Email: {email_user}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n"
        f"üìç –ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: {address}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}\n\n"
        f"‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
    )

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_user = (
        f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name},\n\n"
        f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ! üéâ\n\n"
        f"üîπ –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:\n"
        f"   üìÖ –î–∞—Ç–∞: {date}\n"
        f"   ‚è∞ –í—Ä–µ–º—è: {time}\n"
        f"   üìç –ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: {address}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –î–∞–ª–∏-–•–∏–Ω–∫–∞–ª–∏"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    send_mail(
        subject=f"üöñ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–∫—Å–∏ –æ—Ç {first_name}",
        message=message_admin,
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=[settings.DEFAULT_FROM_EMAIL],
        fail_silently=False,
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if email_user:
        send_mail(
            subject=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫—Å–∏ –Ω–∞ {date}",
            message=message_user,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email_user],
            fail_silently=False,
        )

    return Response(
        {'success': '–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'},
        status=status.HTTP_200_OK
    )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_banquet(request):
    date_time = request.data.get('date_time', '')
    first_name = request.data.get('first_name', '')
    phone = request.data.get('phone', '')
    email_user = request.data.get('email_user', '')
    hall = request.data.get('hall', '')
    count_people = request.data.get('count_people', '')
    additional_services = request.data.get('additional_services', '')

    if not all((
        date_time,
        first_name,
        phone,
        email_user,
        hall,
        count_people
    )):
        return Response({'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.'}, status=400)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    admin_message = (
        f"üìã –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ë–ê–ù–ö–ï–¢–ê –û–¢ {first_name}\n\n"
        f"üìû –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê: {phone}\n"
        f"üìß –ü–û–ß–¢–ê: {email_user}\n"
        f"üèõ –ó–ê–õ: {hall}\n"
        f"üë• –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–°–¢–ï–ô: {count_people}\n"
        f"üìÖ –î–ê–¢–ê –ò –í–†–ï–ú–Ø: {date_time}\n\n"
        f"üí¨ –î–û–ü. –£–°–õ–£–ì–ò: {additional_services}"
    )

    user_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        f"üéâ –í–∞—à –±–∞–Ω–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! üéâ\n\n"
        f"üîç –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:\n"
        f"üè∞ –ó–∞–ª: {hall}\n"
        f"üë• –ì–æ—Å—Ç–µ–π: {count_people}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_time}\n"
        f"üí¨ –î–æ–ø. —É—Å–ª—É–≥–∏: {additional_services}\n\n"
        f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è! üòä"
    )

    try:
        send_mail(
            f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–µ—Ç–∞ –æ—Ç {first_name}",
            admin_message,
            settings.DEFAULT_FROM_EMAIL,
            [settings.DEFAULT_FROM_EMAIL],
            fail_silently=False,
        )

        send_mail(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–Ω–∫–µ—Ç–∞",
            user_message,
            settings.DEFAULT_FROM_EMAIL,
            [email_user],
            fail_silently=False,
        )

        return Response({'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}, status=200)
    except Exception:
        return Response({'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.'}, status=500)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_hookah(request):
    hall = request.data.get('hall', '')
    date = request.data.get('date', '')
    time = request.data.get('time', '')
    first_name = request.data.get('first_name', '')
    phone = request.data.get('phone', '')
    count_people = request.data.get('count_people', '')
    comment = request.data.get('comment', '')
    message = (f"–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê –í –ö–ê–õ–¨–Ø–ù–ù–û–ô –û–¢ {first_name}\n\n"
                f"–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê: {phone}\n–ó–ê–õ: {hall}\n"
                f"–ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–°–¢–ï–ô: {count_people}\n"
                f"–î–ê–¢–ê –ò –í–†–ï–ú–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø: {date} {time}\n\n"
                f"–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: {comment}")
    send_mail(
        f"–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ê –í –ö–ê–õ–¨–Ø–ù–ù–û–ô –û–¢ {first_name}",
        message,
        settings.DEFAULT_FROM_EMAIL,
        [settings.DEFAULT_FROM_EMAIL],
        fail_silently=False,
    )
    return Response({'success': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def payment(request):
    user = "admin"
    password = "1234567Asd!"
    base64_auth = base64.b64encode(f"{user}:{password}".encode()).decode()
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': f'Basic {base64_auth}'
    }
    server_paykeeper = "https://dali-khinkali.server.paykeeper.ru"

    user = request.user
    price = request.data.get('price')
    num_order = request.data.get('num_order', '')
    user_data = request.user
    client_id = user_data.last_name + ' ' + user_data.first_name
    client_email = user_data.email
    service_name = request.data.get('service_name', '')
    client_phone = user_data.phone

    if not price or not num_order or not service_name:
        return Response(
            {'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ'},
            status=status.HTTP_400_BAD_REQUEST
        )

    payment_data = {
        "pay_amount": int(price),
        "clientid": client_id,
        "orderid": num_order,
        "client_email": client_email,
        "service_name": service_name,
        "client_phone": f"{client_phone}"
    }

    # –ì–æ—Ç–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    uri = "/info/settings/token/"
    token_response = requests.get(server_paykeeper + uri, headers=headers)
    token_data = token_response.json()

    # –í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ token, –∏–Ω–∞—á–µ - –æ—à–∏–±–∫–∞
    if 'token' not in token_data:
        return Response({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'}, status=400)

    token = token_data['token']

    # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å 3.4 JSON API –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    uri = "/change/invoice/preview/"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ POST –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    payment_data['token'] = token
    invoice_response = requests.post(
        server_paykeeper + uri,
        headers=headers,
        data=payment_data
    )
    invoice_data = invoice_response.json()

    # –í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ invoice_id, –∏–Ω–∞—á–µ - –æ—à–∏–±–∫–∞
    if 'invoice_id' not in invoice_data:
        return Response({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID'}, status=400)

    invoice_id = invoice_data['invoice_id']
    # –í —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    link = f"{server_paykeeper}/bill/{invoice_id}/"

    return Response({'success': f'{link}', 'payment_status': 'success', })
