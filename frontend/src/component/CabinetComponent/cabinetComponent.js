import { useState } from 'react';
import styles from './cabinet.module.scss';

const CabinetComponent = () => {
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [userData, setUserData] = useState({
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        phone: '+7 (123) 456-78-90',
        email: 'ivan@example.com',
        avatar: 'https://via.placeholder.com/150',
    });

    // –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [userAddress, setUserAddress] = useState({
        city: '–ú–æ—Å–∫–≤–∞',
        street: '–õ–µ–Ω–∏–Ω–∞',
        house: '10',
        apartment: '25',
        entrance: '3',
        intercom: '1234',
        comment: '–û—Å—Ç–∞–≤–∏—Ç—å —É –¥–≤–µ—Ä–∏',
    });

    // –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // eslint-disable-next-line no-unused-vars
    const [orders, setOrders] = useState([
        {
            id: 1,
            date: '2023-05-15',
            items: ['–¢–æ–≤–∞—Ä 1', '–¢–æ–≤–∞—Ä 2', '–¢–æ–≤–∞—Ä 3'],
            total: 12500,
        },
        {
            id: 2,
            date: '2023-06-20',
            items: ['–¢–æ–≤–∞—Ä 4', '–¢–æ–≤–∞—Ä 5'],
            total: 8700,
        },
    ]);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [isDataModalOpen, setIsDataModalOpen] = useState(false);
    const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);
    const [isOrdersOpen, setIsOrdersOpen] = useState(false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
    const handleDataChange = (e) => {
        const { name, value } = e.target;
        setUserData(prev => ({ ...prev, [name]: value }));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥—Ä–µ—Å–∞
    const handleAddressChange = (e) => {
        const { name, value } = e.target;
        setUserAddress(prev => ({ ...prev, [name]: value }));
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const handleSaveData = () => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        setIsDataModalOpen(false);
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    const handleSaveAddress = () => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        setIsAddressModalOpen(false);
    };

    // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    const handleLogout = () => {
        // –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
    };

    return (
        <div className={styles.containerCabinet}>
            {/* –®–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
            <div className={styles.profileHeader}>

                <h2 className={styles.userName}>
                    {userData.firstName} {userData.lastName}
                </h2>
            </div>

            {/* –ú–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ */}
            <div className={styles.menu}>
                <button
                    className={styles.menuButton}
                    onClick={() => setIsDataModalOpen(true)}
                >
                    <span className={styles.icon}>üë§</span>
                    <span className={styles.menuButton_span}>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</span>
                </button>

                <button
                    className={styles.menuButton}
                    onClick={() => setIsAddressModalOpen(true)}
                >
                    <span className={styles.icon}>üè†</span>
                    <span className={styles.menuButton_span}>–ú–æ–π –∞–¥—Ä–µ—Å</span>
                </button>

                <button
                    className={styles.menuButton}
                    onClick={() => setIsOrdersOpen(!isOrdersOpen)}
                >
                    <span className={styles.icon}>üì¶</span>
                    <span className={styles.menuButton_span}>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</span>
                </button>

                <button
                    className={`${styles.menuButton} ${styles.logoutButton}`}
                    onClick={handleLogout}
                >
                    <span className={styles.icon}>üö™</span>
                    <span className={styles.menuButton_span}>–í—ã–π—Ç–∏</span>
                </button>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ" */}
            {isDataModalOpen && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modal}>
                        <h3 className={styles.modal_h3}>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</h3>
                        <div className={styles.formGroup}>
                            <label>–ò–º—è</label>
                            <input
                                type="text"
                                name="firstName"
                                value={userData.firstName}
                                onChange={handleDataChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–§–∞–º–∏–ª–∏—è</label>
                            <input
                                type="text"
                                name="lastName"
                                value={userData.lastName}
                                onChange={handleDataChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                            <input
                                type="tel"
                                name="phone"
                                value={userData.phone}
                                onChange={handleDataChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–ü–æ—á—Ç–∞</label>
                            <input
                                type="email"
                                name="email"
                                value={userData.email}
                                onChange={handleDataChange}
                            />
                        </div>
                        <div className={styles.modalButtons}>
                            <button
                                className={styles.cancelButton}
                                onClick={() => setIsDataModalOpen(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className={styles.saveButton}
                                onClick={handleSaveData}
                            >
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ú–æ–π –∞–¥—Ä–µ—Å" */}
            {isAddressModalOpen && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modal}>
                        <h3 className={styles.modal_h3}>–ú–æ–π –∞–¥—Ä–µ—Å</h3>
                        <div className={styles.formGroup}>
                            <label>–ì–æ—Ä–æ–¥</label>
                            <input
                                type="text"
                                name="city"
                                value={userAddress.city}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–£–ª–∏—Ü–∞</label>
                            <input
                                type="text"
                                name="street"
                                value={userAddress.street}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–î–æ–º</label>
                            <input
                                type="text"
                                name="house"
                                value={userAddress.house}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–ö–≤–∞—Ä—Ç–∏—Ä–∞</label>
                            <input
                                type="text"
                                name="apartment"
                                value={userAddress.apartment}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–ü–æ–¥—ä–µ–∑–¥</label>
                            <input
                                type="text"
                                name="entrance"
                                value={userAddress.entrance}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–î–æ–º–æ—Ñ–æ–Ω</label>
                            <input
                                type="text"
                                name="intercom"
                                value={userAddress.intercom}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.formGroup}>
                            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                            <input
                                type="text"
                                name="comment"
                                value={userAddress.comment}
                                onChange={handleAddressChange}
                            />
                        </div>
                        <div className={styles.modalButtons}>
                            <button
                                className={styles.cancelButton}
                                onClick={() => setIsAddressModalOpen(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className={styles.saveButton}
                                onClick={handleSaveAddress}
                            >
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ë–ª–æ–∫ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" */}
            {isOrdersOpen && (
                <div className={styles.ordersSection}>
                    <h3 className={styles.modal_h3}>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h3>
                    {orders.length > 0 ? (
                        <div className={styles.ordersList}>
                            {orders.map(order => (
                                <div key={order.id} className={styles.orderItem}>
                                    <div className={styles.orderHeader}>
                                        <span className={styles.orderDate}>–î–∞—Ç–∞: {order.date}</span>
                                        <span className={styles.orderTotal}>–°—É–º–º–∞: {order.total} ‚ÇΩ</span>
                                    </div>
                                    <ul className={styles.orderItems}>
                                        {order.items.map((item, index) => (
                                            <li key={index}>{item}</li>
                                        ))}
                                    </ul>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <p className={styles.noOrders}>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                    )}
                </div>
            )}
        </div>
    );
};

export default CabinetComponent;